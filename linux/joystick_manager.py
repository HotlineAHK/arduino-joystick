#!/usr/bin/env python3
import sys
import os
import time
import json
import serial
import serial.tools.list_ports
import platform
import re
from datetime import datetime

class JoystickManager:
    def __init__(self):
        self.os_name = platform.system()
        self.port = None
        self.ser = None

    def get_serial_ports(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤"""
        return [p.device for p in serial.tools.list_ports.comports()]

    def find_arduino_port(self):
        """–£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ/–ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        print("\nüîç –ü–æ–∏—Å–∫ –ø–æ—Ä—Ç–∞ Arduino —á–µ—Ä–µ–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        
        # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤ –î–û –ª—é–±—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        ports_initial = self.get_serial_ports()
        print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ: {len(ports_initial)}")
        
        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ Arduino
        if ports_initial:
            print("\n‚ö†Ô∏è Arduino –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:")
            for i, port in enumerate(ports_initial, 1):
                print(f"   {i}. {port}")
            
            print("\n1. –û—Ç–∫–ª—é—á–∏—Ç–µ Arduino –æ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞")
            input("   ‚Üí –ù–∞–∂–º–∏—Ç–µ Enter, –∫–æ–≥–¥–∞ –æ—Ç–∫–ª—é—á–∏—Ç–µ...")
            
            # –ñ–¥—ë–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
            time.sleep(2)
            ports_after_disconnect = self.get_serial_ports()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏—Å—á–µ–∑–ª–æ
            disconnected = list(set(ports_initial) - set(ports_after_disconnect))
            
            if disconnected:
                print(f"\n‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ: {disconnected[0]}")
                print("2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Arduino –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É")
                input("   ‚Üí –ù–∞–∂–º–∏—Ç–µ Enter, –∫–æ–≥–¥–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ...")
                
                # –ñ–¥—ë–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
                time.sleep(2)
                ports_after_connect = self.get_serial_ports()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ—è–≤–∏–ª–æ—Å—å
                connected = list(set(ports_after_connect) - set(ports_after_disconnect))
                
                if connected:
                    self.port = connected[0]
                    print(f"\n‚úÖ Arduino –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç—É: {self.port}")
                    return self.port
            
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å Arduino —á–µ—Ä–µ–∑ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ/–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        
        # –®–∞–≥ 3: –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –∏–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
        print("\nüîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞...")
        print("1. –û—Ç–∫–ª—é—á–∏—Ç–µ Arduino –æ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞)")
        input("   ‚Üí –ù–∞–∂–º–∏—Ç–µ Enter, –∫–æ–≥–¥–∞ –æ—Ç–∫–ª—é—á–∏—Ç–µ...")
        
        # –°–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤ –î–û –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        ports_before = self.get_serial_ports()
        print(f"   ‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤ –±–µ–∑ Arduino: {len(ports_before)}")
        
        print("\n2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Arduino –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É")
        input("   ‚Üí –ù–∞–∂–º–∏—Ç–µ Enter, –∫–æ–≥–¥–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ...")
        
        # –°–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤ –ü–û–°–õ–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        ports_after = self.get_serial_ports()
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–π –ø–æ—Ä—Ç
        new_ports = list(set(ports_after) - set(ports_before))
        
        if not new_ports:
            print("\n‚ùå Arduino –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("   ‚Ä¢ –ö–∞–±–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            print("   ‚Ä¢ –î—Ä–∞–π–≤–µ—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (–æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è CH340/CH341)")
            print("   ‚Ä¢ –ü–ª–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞")
            return self.manual_port_selection()
            
        elif len(new_ports) == 1:
            self.port = new_ports[0]
            print(f"\n‚úÖ Arduino –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç—É: {self.port}")
            return self.port
            
        else:
            print("\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:")
            for i, port in enumerate(new_ports, 1):
                print(f"   {i}. {port}")
            return self.manual_port_selection(new_ports)

    def manual_port_selection(self, ports=None):
        """–†—É—á–Ω–æ–π –≤—ã–±–æ—Ä –ø–æ—Ä—Ç–∞"""
        if ports is None:
            ports = self.get_serial_ports()
            
        if not ports:
            print("\n‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤")
            return False
            
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã:")
        for i, port in enumerate(ports, 1):
            print(f"   {i}. {port}")
            
        while True:
            try:
                choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞ Arduino: "))
                if 1 <= choice <= len(ports):
                    self.port = ports[choice-1]
                    print(f"\n‚úÖ –í—ã–±—Ä–∞–Ω –ø–æ—Ä—Ç: {self.port}")
                    return self.port
                else:
                    print(f"‚ùå –ù–µ—Ç –ø–æ—Ä—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º {choice}")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")