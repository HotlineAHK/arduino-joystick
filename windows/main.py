import sys
import time
import serial
import serial.tools.list_ports
import ctypes
from datetime import datetime

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BAUD_RATE = 115200
KEY_DELAY = 0.005  # –ö–†–ò–¢–ò–ß–ï–°–ö–û –í–ê–ñ–ù–û: 5 –º—Å –≤–º–µ—Å—Ç–æ 20
# ----------------

# Windows API –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
KEYEVENTF_KEYDOWN = 0x0000
KEYEVENTF_KEYUP = 0x0002
MAPVK_VK_TO_VSC = 0x00

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏—à —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏ Windows
VK_CODES = {
    'w': 0x57,  # 'W'
    'a': 0x41,  # 'A'
    's': 0x53,  # 'S'
    'd': 0x44,  # 'D'
    ' ': 0x20   # –ü—Ä–æ–±–µ–ª
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Windows API
def send_key(vk_code, is_down):
    scan_code = ctypes.windll.user32.MapVirtualKeyW(vk_code, MAPVK_VK_TO_VSC)
    flags = 0
    if not is_down:
        flags |= KEYEVENTF_KEYUP
    ctypes.windll.user32.keybd_event(vk_code, scan_code, flags, 0)

def find_arduino_port():
    """–£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ/–ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("\nüîç –ü–æ–∏—Å–∫ –ø–æ—Ä—Ç–∞ Arduino —á–µ—Ä–µ–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤ –î–û –ª—é–±—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    ports_initial = [p.device for p in serial.tools.list_ports.comports()]
    print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ: {len(ports_initial)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ Arduino
    if ports_initial:
        print("\n‚ö†Ô∏è Arduino –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤ —Å–ø–∏—Å–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:")
        for i, port in enumerate(ports_initial, 1):
            print(f"   {i}. {port}")
        
        print("\n1. –û—Ç–∫–ª—é—á–∏—Ç–µ Arduino –æ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞")
        input("   ‚Üí –ù–∞–∂–º–∏—Ç–µ Enter, –∫–æ–≥–¥–∞ –æ—Ç–∫–ª—é—á–∏—Ç–µ...")
        
        # –ñ–¥—ë–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        time.sleep(2)
        ports_after_disconnect = [p.device for p in serial.tools.list_ports.comports()]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏—Å—á–µ–∑–ª–æ
        disconnected = list(set(ports_initial) - set(ports_after_disconnect))
        
        if disconnected:
            print(f"\n‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ: {disconnected[0]}")
            print("2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Arduino –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É")
            input("   ‚Üí –ù–∞–∂–º–∏—Ç–µ Enter, –∫–æ–≥–¥–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ...")
            
            # –ñ–¥—ë–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
            time.sleep(2)
            ports_after_connect = [p.device for p in serial.tools.list_ports.comports()]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ—è–≤–∏–ª–æ—Å—å
            connected = list(set(ports_after_connect) - set(ports_after_disconnect))
            
            if connected:
                print(f"\n‚úÖ Arduino –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç—É: {connected[0]}")
                return connected[0]
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
    print("\nüîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞...")
    print("1. –û—Ç–∫–ª—é—á–∏—Ç–µ Arduino –æ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞)")
    input("   ‚Üí –ù–∞–∂–º–∏—Ç–µ Enter, –∫–æ–≥–¥–∞ –æ—Ç–∫–ª—é—á–∏—Ç–µ...")
    
    # –°–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤ –î–û –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    ports_before = [p.device for p in serial.tools.list_ports.comports()]
    print(f"   ‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤ –±–µ–∑ Arduino: {len(ports_before)}")
    
    print("\n2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Arduino –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É")
    input("   ‚Üí –ù–∞–∂–º–∏—Ç–µ Enter, –∫–æ–≥–¥–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ...")
    
    # –°–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤ –ü–û–°–õ–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    time.sleep(2)
    ports_after = [p.device for p in serial.tools.list_ports.comports()]
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–π –ø–æ—Ä—Ç
    new_ports = list(set(ports_after) - set(ports_before))
    
    if not new_ports:
        print("\n‚ùå Arduino –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!")
        return None
        
    elif len(new_ports) == 1:
        print(f"\n‚úÖ Arduino –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç—É: {new_ports[0]}")
        return new_ports[0]
        
    else:
        print("\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:")
        for i, port in enumerate(new_ports, 1):
            print(f"   {i}. {port}")
        
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã:")
        for i, port in enumerate(new_ports, 1):
            print(f"   {i}. {port}")
            
        while True:
            try:
                choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞ Arduino: "))
                if 1 <= choice <= len(new_ports):
                    print(f"\n‚úÖ –í—ã–±—Ä–∞–Ω –ø–æ—Ä—Ç: {new_ports[choice-1]}")
                    return new_ports[choice-1]
                else:
                    print(f"‚ùå –ù–µ—Ç –ø–æ—Ä—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º {choice}")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

def main():
    print("="*50)
    print("üéÆ –°–≤–µ—Ä—Ö–±—ã—Å—Ç—Ä—ã–π –¥–∂–æ–π—Å—Ç–∏–∫ –¥–ª—è Arduino (Windows)")
    print("="*50)
    
    # –ü–æ–∏—Å–∫ –ø–æ—Ä—Ç–∞
    port = find_arduino_port()
    if not port:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Ä—Ç Arduino")
        return
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Arduino
    try:
        ser = serial.Serial(port, BAUD_RATE, timeout=0.1)
        print(f"\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {port}")
        time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è Arduino –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç: {e}")
        return
    
    print("\nüéÆ –ó–∞–ø—É—Å–∫ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π...")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
    
    # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏—à
    active_keys = set()
    
    try:
        while True:
            # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if ser.in_waiting > 0:
                line = ser.readline().decode('utf-8', errors='ignore').strip()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤—ã–µ –∫–ª–∞–≤–∏—à–∏
                target_keys = set()
                if line != "." and len(line) > 0:
                    for char in line.lower():
                        if char in VK_CODES:
                            target_keys.add(char)
            
            else:
                target_keys = set()
            
            # –û—Ç–ø—É—Å–∫–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
            for key in list(active_keys):
                if key not in target_keys:
                    send_key(VK_CODES[key], False)
                    active_keys.remove(key)
            
            # –ù–∞–∂–∏–º–∞–µ–º –Ω–æ–≤—ã–µ –∫–ª–∞–≤–∏—à–∏
            for key in target_keys:
                if key not in active_keys:
                    send_key(VK_CODES[key], True)
                    active_keys.add(key)
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            time.sleep(KEY_DELAY)
    
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    
    finally:
        # –û—Ç–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–ª–∞–≤–∏—à–∏
        for key in active_keys:
            send_key(VK_CODES[key], False)
        print("üîå –í—Å–µ –∫–ª–∞–≤–∏—à–∏ –æ—Ç–ø—É—â–µ–Ω—ã.")

if __name__ == "__main__":
    main()
