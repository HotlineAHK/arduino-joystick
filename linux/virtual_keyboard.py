#!/usr/bin/env python3

import time
import serial
from evdev import UInput, ecodes as e

from joystick_manager import JoystickManager

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
SERIAL_PORT = '/dev/serial/by-id/usb-1a86_USB2.0-Serial-if00-port0'
BAUD_RATE = 500000

KEY_DELAY = 0.020  # –í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
# -----------------

joymgr = JoystickManager()

joymgr.find_arduino_port()

SERIAL_PORT = joymgr.port

# –°–æ–∑–¥–∞—ë–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
cap = {
    e.EV_KEY: [
        e.KEY_W, e.KEY_A, e.KEY_S, e.KEY_D,
        e.KEY_SPACE
    ]
}

try:
    ui = UInput(cap, name="Arduino Joystick Keyboard", bustype=e.BUS_USB)
    print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")
except PermissionError:
    print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ /dev/uinput")
    print("üí° –í—ã–ø–æ–ª–Ω–∏: sudo usermod -aG input $USER –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Å—å")
    exit(1)
except Exception as ex:
    print(f"‚ùå –û—à–∏–±–∫–∞: {ex}")
    exit(1)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Arduino
try:
    ser = serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=1)
    print(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {SERIAL_PORT}")
except Exception as e:
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç: {e}")
    ui.close()
    exit(1)

print("üéÆ –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞...\n")

# –ö–æ–¥—ã –∫–ª–∞–≤–∏—à
key_map = {
    'w': e.KEY_W,
    's': e.KEY_S,
    'a': e.KEY_A,
    'd': e.KEY_D,
    'SPACE': e.KEY_SPACE
}

keys = [
    'w', 
    's', 
    'a', 
    'd', 
    'SPACE'
    ]

# –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –∫–∞–∫–∏–µ –∫–ª–∞–≤–∏—à–∏ –Ω–∞–∂–∞—Ç—ã
active_keys = set()

def press_key(key_char):
    """–ù–∞–∂–∏–º–∞–µ—Ç –∫–ª–∞–≤–∏—à—É, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –Ω–∞–∂–∞—Ç–∞"""
    if key_char not in active_keys:
        key_code = key_map.get(key_char.lower())
        if key_code:
            ui.write(e.EV_KEY, key_code, 1)
            ui.syn()
            active_keys.add(key_char)
            print(f"‚å®Ô∏è  –ù–∞–∂–∞—Ç–∞: {key_char.upper()}")

def release_key(key_char):
    """–û—Ç–ø—É—Å–∫–∞–µ—Ç –∫–ª–∞–≤–∏—à—É, –µ—Å–ª–∏ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞"""
    if key_char in active_keys:
        key_code = key_map.get(key_char.lower())
        if key_code:
            ui.write(e.EV_KEY, key_code, 0)
            ui.syn()
            active_keys.remove(key_char)
            print(f"‚å®Ô∏è  –û—Ç–ø—É—â–µ–Ω–∞: {key_char.upper()}")

try:
    while True:
        if ser.in_waiting > 0:
            byte_data = ser.read(1)[0]

            #print(f"–ü–æ–ª—É—á–µ–Ω –±–∞–π—Ç: {byte_data} (–±–∏–Ω–∞—Ä–Ω–æ: {bin(byte_data)})")

            target_keys = set()
            for i, key in enumerate(keys):
                if byte_data & (1 << i):
                    #print(f"–ë–∏—Ç {i} –≤–∫–ª—é—á—ë–Ω –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '{key}'")
                    target_keys.add(key)
        else:
            target_keys = set()

        # === –õ–æ–≥–∏–∫–∞ –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π ===

        # 1. –û—Ç–ø—É—Å–∫–∞–µ–º –∫–ª–∞–≤–∏—à–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–æ–≤–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        for key in list(active_keys):
            if key not in target_keys:
                release_key(key)

        # 2. –ù–∞–∂–∏–º–∞–µ–º –Ω–æ–≤—ã–µ –∫–ª–∞–≤–∏—à–∏
        for key in target_keys:
            if key not in active_keys:
                press_key(key)

        time.sleep(KEY_DELAY)

except KeyboardInterrupt:
    print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")

except Exception as e:
    print(f"üí• –û—à–∏–±–∫–∞: {e}")

finally:
    # –û—Ç–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–ª–∞–≤–∏—à–∏
    for key in list(active_keys):
        release_key(key)
    ui.close()
    print("üîå –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
