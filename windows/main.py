import sys
import time
import serial
import serial.tools.list_ports
import ctypes
from datetime import datetime

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BAUD_RATE = 115200
KEY_DELAY = 0.005  # 5 –º—Å ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
# ----------------

# Windows API –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
KEYEVENTF_KEYDOWN = 0x0000
KEYEVENTF_KEYUP = 0x0002
MAPVK_VK_TO_VSC = 0x00

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏—à —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏ Windows
VK_CODES = {
    'w': 0x57,  # 'W'
    'a': 0x41,  # 'A'
    's': 0x53,  # 'S'
    'd': 0x44,  # 'D'
    ' ': 0x20   # –ü—Ä–æ–±–µ–ª
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ —á–µ—Ä–µ–∑ Windows API
def send_key(vk_code, is_down):
    scan_code = ctypes.windll.user32.MapVirtualKeyW(vk_code, MAPVK_VK_TO_VSC)
    flags = KEYEVENTF_KEYUP if not is_down else 0
    ctypes.windll.user32.keybd_event(vk_code, scan_code, flags, 0)

def find_arduino_port():
    """–£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ Arduino —á–µ—Ä–µ–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    print("\nüîç –ü–æ–∏—Å–∫ –ø–æ—Ä—Ç–∞ Arduino —á–µ—Ä–µ–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")

    # –ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤
    ports_initial = [p.device for p in serial.tools.list_ports.comports()]
    print(f"   ‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(ports_initial)}")
    
    if ports_initial:
        print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
        for i, port in enumerate(ports_initial, 1):
            print(f"   {i}. {port}")
        
        print("\n1. –û—Ç–∫–ª—é—á–∏—Ç–µ Arduino –∏ –Ω–∞–∂–º–∏—Ç–µ Enter...")
        input("   ‚Üí ")
        time.sleep(2)

        ports_after_disconnect = [p.device for p in serial.tools.list_ports.comports()]
        disconnected = set(ports_initial) - set(ports_after_disconnect)

        print("\n2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Arduino –∏ –Ω–∞–∂–º–∏—Ç–µ Enter...")
        input("   ‚Üí ")
        time.sleep(2)

        ports_after_connect = [p.device for p in serial.tools.list_ports.comports()]
        connected = set(ports_after_connect) - set(ports_after_disconnect)

        if connected:
            print(f"\n‚úÖ Arduino –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç—É: {list(connected)[0]}")
            return list(connected)[0]
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º: –¥–æ/–ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("\nüîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞...")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Arduino –æ—Ç–∫–ª—é—á–µ–Ω–∞, –∏ –Ω–∞–∂–º–∏—Ç–µ Enter...")
    input("   ‚Üí ")
    time.sleep(1)
    ports_before = [p.device for p in serial.tools.list_ports.comports()]

    print("\n2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Arduino –∏ –Ω–∞–∂–º–∏—Ç–µ Enter...")
    input("   ‚Üí ")
    time.sleep(2)
    ports_after = [p.device for p in serial.tools.list_ports.comports()]

    new_ports = set(ports_after) - set(ports_before)
    if not new_ports:
        print("\n‚ùå Arduino –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞.")
        return None
    elif len(new_ports) == 1:
        port = list(new_ports)[0]
        print(f"\n‚úÖ Arduino –Ω–∞–π–¥–µ–Ω–∞: {port}")
        return port
    else:
        print("\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:")
        for i, p in enumerate(new_ports, 1):
            print(f"   {i}. {p}")
        while True:
            try:
                choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞: "))
                port_list = list(new_ports)
                if 1 <= choice <= len(port_list):
                    return port_list[choice - 1]
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

def main():
    print("="*50)
    print("üéÆ –î–∂–æ–π—Å—Ç–∏–∫ Arduino ‚Üí –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (Windows)")
    print("   –†–µ–∂–∏–º: —Ç–æ—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∂–∞—Ç–∏–µ–º –∫–ª–∞–≤–∏—à")
    print("="*50)

    port = find_arduino_port()
    if not port:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Ä—Ç Arduino.")
        return

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Arduino
    try:
        ser = serial.Serial(port, BAUD_RATE, timeout=0.1)
        print(f"\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {port} @ {BAUD_RATE} baud")
        time.sleep(2)  # –í—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É Arduino
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return

    print("\nüéÆ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∂–æ–π—Å—Ç–∏–∫.")
    print("‚ÑπÔ∏è  –¶–µ–Ω—Ç—Ä ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–∂–∞—Ç–æ. –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ‚Äî –¥–≤–∏–∂–µ–Ω–∏–µ.")
    print("üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞.\n")

    active_keys = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–∂–∞—Ç—ã—Ö –∫–ª–∞–≤–∏—à

    try:
        while True:
            # –ß—Ç–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ Arduino
            if ser.in_waiting > 0:
                try:
                    line = ser.readline().decode('utf-8', errors='ignore').strip()
                except:
                    line = ""
                
                # –ü–∞—Ä—Å–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
                current_keys = set()
                if line and line != ".":
                    for char in line.lower():
                        if char in VK_CODES:
                            current_keys.add(char)
            else:
                current_keys = set()

            # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ñ–ê–¢–ò–ï–ú ===
            # 1. –û—Ç–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞–≤–∏—à–∏, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã
            for key in active_keys - current_keys:
                send_key(VK_CODES[key], False)
                print(f"üì§ –û—Ç–ø—É—â–µ–Ω–æ: '{key.upper()}'")  # –õ–æ–≥ (–ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)

            # 2. –ù–∞–∂–∞—Ç—å –Ω–æ–≤—ã–µ –∫–ª–∞–≤–∏—à–∏
            for key in current_keys - active_keys:
                send_key(VK_CODES[key], True)
                print(f"üì• –ù–∞–∂–∞—Ç–æ: '{key.upper()}'")  # –õ–æ–≥ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            active_keys = current_keys

            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            time.sleep(KEY_DELAY)

    except KeyboardInterrupt:
        print("\n\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")

    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—Ç–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–ª–∞–≤–∏—à–∏
        for key in active_keys:
            send_key(VK_CODES[key], False)
        print("üîå –í—Å–µ –∫–ª–∞–≤–∏—à–∏ –æ—Ç–ø—É—â–µ–Ω—ã.")
        try:
            ser.close()
        except:
            pass
        print("üîå –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç.")

if __name__ == "__main__":
    main()
